%this is the static PLA j2 template
include "globals.mzn";

% This is the NETWORK RESOURCE MODEL (CAPACITY)
int: number_of_dc;                                                 % Number of DCs that are available for SW deployment

array[1..number_of_dc] of int: datacenter_id;                      % Datacenter identity
array[1..number_of_dc] of int: vm;                                 % Number of supported VMs per datacenter
array[1..number_of_dc] of int: vm_cost;                            % The cost to produce 1 VM
array[1..number_of_dc] of int: storage;                            % Amount of storage per datacenter
array[1..number_of_dc, 1..number_of_dc] of int: trp_id;            % Transport link identity. The links are modeled as a matrix of DC to DC connections
array[1..number_of_dc, 1..number_of_dc] of int: trp_latency;         % Transport link latency between datacenters
array[1..number_of_dc, 1..number_of_dc] of int: trp_price;         % Transport link price per Mbps

% This is the NETWORK BASIC LOAD MODEL (CONSUMED)
array[1..number_of_dc] of int: consumed_vm;                        % Number of consumed VMs per datacenter
array[1..number_of_dc] of int: consumed_storage;                   % Amount of consumed storage per datacenter
%array[1..number_of_dc, 1..number_of_dc] of int: consumed_trp_bw;   % Consumed transport link bandwidth between datacenters

% This is the SERVICE CONSUMPTION MODEL
int: service_latency;                                               % Maximum allowed service latency, end-to-end
int: service_vnf1_vm;                                              % VNF1 VM requirement
int: service_vnf1_storage;                                         % VNF1 storage requirement
int: service_vnf2_vm;                                              % VNF2 VM requirement
int: service_vnf2_storage;                                         % VNF2 storage requirement
int: service_vnf3_vm;                                              % VNF3 VM requirement
int: service_vnf3_storage;                                         % VNF3 storage requirement
%int: service_link0_latency;                                          % Link CPE - VNF1 maximum latency requirement
%int: service_link0_bw;                                             % Link CPE - VNF1 minimum bandwidth requirement
int: service_link1_latency;                                         % Link VNF1 - VNF2 maximum latency requirement
%int: service_link1_bw;                                             % Link VNF1 - VNF2 minimum bandwidth requirement
int: service_link2_latency;                                         % Link VNF2 - VNF3 maximum latency requirement
%int: service_link2_bw;                                             % Link VNF2 - VNF3 minumum bandwidth requirement

% These are the variables, i.e. which DC to select for each VNF
var 1..number_of_dc: VNF1;                                         % VNF1 can potentially be allocated to any of the available DCs
var 1..number_of_dc: VNF2;                                         % VNF2 can potentially be allocated to any of the available DCs
var 1..number_of_dc: VNF3;                                         % VNF3 can potentially be allocated to any of the available DCs

% These are the set of rules for selecting DCs to VNFs
constraint (vm[VNF1]-consumed_vm[VNF1]) >= service_vnf1_vm;                      % The available VMs in selected DC is enough for VNF1
constraint (vm[VNF2]-consumed_vm[VNF2]) >= service_vnf2_vm;                      % The available VMs in selected DC is enough for VNF2
constraint (vm[VNF3]-consumed_vm[VNF3]) >= service_vnf3_vm;                      % The available VMs in selected DC is enough for VNF3
constraint (storage[VNF1]-consumed_storage[VNF1]) >= service_vnf1_storage;       % The available storage in selected DC is enough for VNF1
constraint (storage[VNF2]-consumed_storage[VNF2]) >= service_vnf2_storage;       % The available storage in selected DC is enough for VNF2
constraint (storage[VNF3]-consumed_storage[VNF3]) >= service_vnf3_storage;       % The available storage in selected DC is enough for VNF3
constraint (trp_latency[VNF1, VNF2]) <= service_link1_latency;                     % The DC-DC link latency should be smaller then required by service link 1
%constraint (trp_bw[VNF1, VNF2]-consumed_trp_bw[VNF1, VNF2]) >= service_link1_bw; % The available DC-DC link bandwidth should be larger then required by service link 1
constraint (trp_latency[VNF2, VNF3]) <= service_link2_latency;                     % The DC-DC link latency should be smaller then required by service link 2
%constraint (trp_bw[VNF2, VNF3]-consumed_trp_bw[VNF2, VNF3]) >= service_link2_bw; % The available DC-DC link bandwidth should be larger then required by service link 2
constraint total_latency <= service_latency;                                         % The total latency cannot exceed the maximum allowed service latency requiremet
constraint alldifferent([VNF1, VNF2, VNF3]);

% Calculate the total cost and costs for VMs and Transport links
%var int: transport_cost = trp_cost[VNF1,VNF2]*service_link1_bw+trp_cost[VNF2,VNF3]*service_link2_bw;
var int: virtual_machine_cost = vm_cost[VNF1]*service_vnf1_vm+vm_cost[VNF2]*service_vnf2_vm+vm_cost[VNF3]*service_vnf3_vm;
%var int: total_cost = transport_cost + virtual_machine_cost;

% Calculate total latency
var int: total_latency = trp_latency[VNF1, VNF2] + trp_latency[VNF2, VNF3];

solve minimize virtual_machine_cost;
